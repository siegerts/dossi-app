// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  USER
  TEST
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  Note     Note[]
  Pin      Pin[]
  // Label    Label[]
  Reminder Reminder[]

  // stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  // stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  // stripePriceId          String?   @map(name: "stripe_price_id")
  // stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Note {
  id        String   @id @default(cuid())
  // content   Json?
  url       String
  content   String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  userId    String

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Label    Label[]
  Reminder Reminder[]

  @@map(name: "notes")
}

model Pin {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  userId    String

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Reminder Reminder[]

  @@map(name: "pins")
}

model Reminder {
  id        String   @id @default(cuid())
  remindAt  DateTime @map(name: "remind_at")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  userId    String
  noteId    String?
  pinId     String?

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note? @relation(fields: [noteId], references: [id], onDelete: Cascade)
  pin  Pin?  @relation(fields: [pinId], references: [id], onDelete: Cascade)

  @@map(name: "reminders")
}

// model Label {
//   id          String  @id @default(cuid())
//   name        String
//   description String?
//   color       String?

//   createdAt DateTime @default(now()) @map(name: "created_at")
//   updatedAt DateTime @default(now()) @map(name: "updated_at")
//   userId    String
//   noteId    String

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   note Note @relation(fields: [noteId], references: [id])

//   @@map(name: "labels")
// }
