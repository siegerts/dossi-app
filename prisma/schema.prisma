// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  USER
  TEST
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id                     String     @id @default(cuid())
  name                   String?
  email                  String?    @unique
  emailVerified          DateTime?
  image                  String?
  role                   Role       @default(USER)
  createdAt              DateTime   @default(now()) @map(name: "created_at")
  updatedAt              DateTime   @default(now()) @map(name: "updated_at")
  stripeCustomerId       String?    @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?    @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?    @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?  @map(name: "stripe_current_period_end")
  entities               Entity[]
  notes                  Note[]
  pins                   Pin[]
  labels                 Label[]
  reminders              Reminder[]
  Account                Account[]
  Session                Session[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Entity {
  id        String   @id @default(cuid())
  title     String?
  url       String
  userId    String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  notes     Note[]
  pins      Pin[]
  labels    Label[]
  reminders Reminder[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, url])
  @@fulltext([title])
  @@map(name: "entities")
}

model Note {
  id        String   @id @default(cuid())
  // content   Json?
  url       String
  content   String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  userId    String
  entityId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@fulltext([content])
  @@map(name: "notes")
}

model Pin {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  userId    String
  entityId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@unique([userId, url])
  @@map(name: "pins")
}

model Reminder {
  id        String   @id @default(cuid())
  remindAt  DateTime @map(name: "remind_at")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  url       String?
  userId    String
  entityId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@map(name: "reminders")
}

model Label {
  id          String  @id @default(cuid())
  name        String
  description String?
  color       String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  userId    String
  entityId  String

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  entity Entity? @relation(fields: [entityId], references: [id])

  @@unique([userId, name])
  @@fulltext([name])
  @@map(name: "labels")
}
