// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  USER
  TEST
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String?   @unique
  emailVerified          DateTime?
  image                  String?
  role                   Role      @default(USER)
  createdAt              DateTime  @default(now()) @map(name: "created_at")
  updatedAt              DateTime  @default(now()) @map(name: "updated_at")
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  entities               Entity[]
  notes                  Note[]
  pins                   Pin[]
  labels                 Label[]
  Account                Account[]
  Session                Session[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Entity {
  id        String             @id @default(cuid())
  title     String?            @db.Text
  url       String             @db.VarChar(500)
  userId    String
  notes     Note[]
  pins      Pin[]
  labels    LabelsOnEntities[]
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime           @default(now()) @map(name: "created_at")
  updatedAt DateTime           @default(now()) @map(name: "updated_at")

  @@unique([userId, url])
  @@map(name: "entities")
}

model Note {
  id String @id @default(cuid())

  content   String?  @db.Text
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  userId    String
  entityId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "notes")
}

model Pin {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  userId    String
  entityId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@unique([userId, url])
  @@map(name: "pins")
}

model Label {
  id          String             @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime           @default(now()) @map(name: "created_at")
  updatedAt   DateTime           @default(now()) @map(name: "updated_at")
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  entities    LabelsOnEntities[]

  @@unique([userId, name])
  @@map(name: "labels")
}

model LabelsOnEntities {
  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  entityId  String
  label     Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)
  labelId   String
  userId    String
  createdAt DateTime @default(now()) @map(name: "created_at")

  @@id([userId, entityId, labelId])
}
